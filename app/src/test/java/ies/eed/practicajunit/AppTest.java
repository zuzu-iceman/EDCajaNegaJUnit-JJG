 
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ies.eed.practicajunit;

import static org.junit.jupiter.api.Assertions.assertEquals;


import java.lang.reflect.Method;

import org.junit.jupiter.api.Test;

import ies.eed.practicajunit.balls.Ball;
import ies.eed.practicajunit.balls.BallColor;
import ies.eed.practicajunit.balls.BallType;
import javafx.geometry.Point2D;
import javafx.geometry.Rectangle2D;

class AppTest {
    @Test
    void testBallConstructor() {

        Ball ball1 = new Ball(new Point2D(0, 0), BallType.LITTLE, BallColor.RED);
        assertEquals(BallType.LITTLE, ball1.getType());
        assertEquals(BallColor.RED, ball1.getColor());
        assertEquals(0, ball1.getPosition().getX());
        assertEquals(0, ball1.getPosition().getY());

        Ball ball2 = new Ball(new Point2D(100, 50), BallType.MEDIUM, BallColor.GREEN);
        assertEquals(BallType.MEDIUM, ball2.getType());
        assertEquals(BallColor.GREEN, ball2.getColor());
        assertEquals(100, ball2.getPosition().getX());
        assertEquals(50, ball2.getPosition().getY());
    }

    @Test
    void testMove() {

        Ball ball1 = new Ball(new Point2D(50, 50), BallType.LITTLE, BallColor.RED);
        ball1.setVelocity(new Point2D(1, 1));
        ball1.move(new Rectangle2D(0, 0, 100, 100));
        assertEquals(new Point2D(51, 51), ball1.getPosition());

        Ball ball2 = new Ball(new Point2D(25, 25), BallType.MEDIUM, BallColor.GREEN);
        ball2.setVelocity(new Point2D(-1, -1));
        ball2.move(new Rectangle2D(0, 0, 50, 50));
        assertEquals(new Point2D(24, 24), ball2.getPosition());

        Ball ball3 = new Ball(new Point2D(50, 50), BallType.BIG, BallColor.BLUE);
        ball3.setVelocity(new Point2D(0, 0));
        ball3.move(new Rectangle2D(0, 0, 100, 100));
        assertEquals(new Point2D(50, 50), ball3.getPosition());
    }

    @Test
    void testStopinY() {

        Ball ball1 = new Ball(new Point2D(0, 0), BallType.LITTLE, BallColor.RED);
        ball1.setVelocity(new Point2D(0, 0));
        ball1.setGravity(new Point2D(0, 1));
        ball1.stopinY();
        assertEquals(0, ball1.getVelocity().getY());
        assertEquals(0, ball1.getGravity().getY());

        Ball ball2 = new Ball(new Point2D(0, 0), BallType.MEDIUM, BallColor.GREEN);
        ball2.setVelocity(new Point2D(0, 1));
        ball2.setGravity(new Point2D(0, 1));
        ball2.stopinY();
        assertEquals(0, ball2.getVelocity().getY());
        assertEquals(0, ball2.getGravity().getY());

        Ball ball3 = new Ball(new Point2D(0, 0), BallType.BIG, BallColor.BLUE);
        ball3.setVelocity(new Point2D(0, -1));
        ball3.setGravity(new Point2D(0, 1));
        ball3.stopinY();
        assertEquals(0, ball3.getVelocity().getY());
        assertEquals(0, ball3.getGravity().getY());
    }

    @Test
    void testStopinX() {
        Ball ball1 = new Ball(new Point2D(0, 0), BallType.LITTLE, BallColor.RED);
        ball1.setVelocity(new Point2D(5, 0));
        ball1.stopinX();
        assertEquals(0, ball1.getVelocity().getX());

        Ball ball2 = new Ball(new Point2D(0, 0), BallType.LITTLE, BallColor.RED);
        ball2.setVelocity(new Point2D(-3, 0));
        ball2.stopinX();
        assertEquals(0, ball2.getVelocity().getX());

        Ball ball3 = new Ball(new Point2D(0, 0), BallType.LITTLE, BallColor.RED);
        ball3.setVelocity(new Point2D(0, 0));
        ball3.stopinX();
        assertEquals(0, ball3.getVelocity().getX());
    }

    @Test
    void testReverseVy() {
        Ball ball1 = new Ball(new Point2D(0, 0), BallType.LITTLE, BallColor.RED);
        ball1.setVelocity(new Point2D(0, 7));
        ball1.reverseVy();
        assertEquals(-7, ball1.getVelocity().getY());

        Ball ball2 = new Ball(new Point2D(0, 0), BallType.LITTLE, BallColor.RED);
        ball2.setVelocity(new Point2D(0, -4));
        ball2.reverseVy();
        assertEquals(4, ball2.getVelocity().getY());

        Ball ball3 = new Ball(new Point2D(0, 0), BallType.LITTLE, BallColor.RED);
        ball3.setVelocity(new Point2D(0, 0));
        ball3.reverseVy();
        assertEquals(0, ball3.getVelocity().getY());
    }

    @Test
    void testReverseVx() {
        Ball ball1 = new Ball(new Point2D(0, 0), BallType.LITTLE, BallColor.RED);
        ball1.setVelocity(new Point2D(6, 0));
        ball1.reverseVx();
        assertEquals(-6, ball1.getVelocity().getX());

        Ball ball2 = new Ball(new Point2D(0, 0), BallType.LITTLE, BallColor.RED);
        ball2.setVelocity(new Point2D(-2, 0));
        ball2.reverseVx();
        assertEquals(2, ball2.getVelocity().getX());

        Ball ball3 = new Ball(new Point2D(0, 0), BallType.LITTLE, BallColor.RED);
        ball3.setVelocity(new Point2D(0, 0));
        ball3.reverseVx();
        assertEquals(0, ball3.getVelocity().getX());
    }

    void testUpdateVelocity() {
        Ball ball1 = new Ball(new Point2D(0, 0), BallType.LITTLE, BallColor.RED);
        ball1.setVelocity(new Point2D(5, 0));
        ball1.updateVelocity();
    
        Ball ball2 = new Ball(new Point2D(0, 0), BallType.LITTLE, BallColor.RED);
        ball2.setVelocity(new Point2D(0, 0));
        ball2.updateVelocity();
        assertEquals(0, ball2.getVelocity().getX());
    
        Ball ball3 = new Ball(new Point2D(0, 0), BallType.LITTLE, BallColor.RED);
        ball3.setVelocity(new Point2D(3, 0));
        ball3.updateVelocity();
    }
}

